# Partial example code for Spaceship

import simplegui
import math

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# sound assets purchased from sounddogs.com, please do not redistribute
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):
#        canvas.draw_circle(self.pos, self.radius, 1, "White", "White")
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)

    def update(self):
        # moving
#        print 'self.pos[0]:', self.pos[0]
#        print 'self.pos[1]:', self.pos[1]
        self.pos[0] = (self.pos[0] + self.vel[0])%FRAME_W
        self.pos[1] = (self.pos[1] + self.vel[1])%FRAME_H
#        print 'self.pos[0]:', self.pos[0]
#        print 'self.pos[1]:', self.pos[1]
        
        
        
        # friction
        self.vel[0] *= .98
        self.vel[1] *= .98
               
        
        #rotation
        self.angle += self.angle_vel
        
        #vector
        vector =[0,0]
        vector[0] = math.cos(self.angle)*.3
        vector[1] = math.sin(self.angle)*.3

        #acceleration
        if self.thrust:
            
            self.vel[0] += vector[0]
            self.vel[1] += vector[1]
        pass
    
    def update_image_pos(self, pos):
        self.image_center[0] += pos[0]
        self.image_center[1] += pos[1]
        
    def get_image_pos(self):
        return self.image_center
        
    
FRAME_W = 1200
FRAME_H = 800
s = Ship([FRAME_W/2, FRAME_H/2], [0,0],0, ship_image,ship_info)

def draw(canvas):
    s.update()
    s.draw(canvas)
    

def keydown(key):
    if key==simplegui.KEY_MAP["left"]:
        s.angle_vel = -0.05
    elif key==simplegui.KEY_MAP["right"]:
        s.angle_vel = 0.05
    elif key==simplegui.KEY_MAP["down"]:
        pass
    elif key==simplegui.KEY_MAP["up"]:
        
        s.update_image_pos([90,0])
        s.thrust = True
        
def keyup(key):
    if key==simplegui.KEY_MAP["left"]:
        s.angle_vel = 0
    elif key==simplegui.KEY_MAP["right"]:
        s.angle_vel = 0
    elif key==simplegui.KEY_MAP["down"]:
        pass
    elif key==simplegui.KEY_MAP["up"]:
        s.update_image_pos([-90,0])
        s.thrust = False
        print 'x=',math.cos(s.angle)
        print 'y=',math.sin(s.angle)
    
    
    
frame = simplegui.create_frame('Ship', FRAME_W, FRAME_H)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.start()
