# program template for Spaceship
import simplegui
import math
import random
#http://www.codeskulptor.org/#user40_qn9gCMZ42D_0.py
# globals for user interface
WIDTH = 1400
HEIGHT = 900
score = 0
lives = 3
time = 0
fire_missile = False
#a_missile = []
#a_rocket = []
#explosions = []
start = False
canvas_missile_size = [80, 80]
canvas_rocket_size = [100, 100]
ASTEROIDS_AMOUNT = 12
a_rock = set()
my_missile = set()
my_rocket = set()
allien_missiles = set()
allien_ships = set()
explosions = set()
allien_ships_pos = [[100,50], [WIDTH/2,50], [WIDTH-100,50]]
class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False, canvas_size = None, i = 0):
        self.i = i
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        
        if canvas_size == None:
            self.canvas_size = size
        else:
            self.canvas_size = canvas_size
        
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size
    
    def get_canvas_size(self):
        return self.canvas_size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("https://www.dropbox.com/s/x7hrqd74w6z9jpk/debris2_blue.png?dl=1")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("https://www.dropbox.com/s/pom728e8x7pcyxi/nebula_blue.f2014.png?dl=1")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("https://www.dropbox.com/s/jho0d75pc0bkuay/splash.png?dl=1")

# ship image
#original ship
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("https://www.dropbox.com/s/ugtckt68t5r9ubn/double_ship.png?dl=1")

#Republic Gunship
#ship1_info = ImageInfo([64, 64], [128, 128], 35, 0, False, [90, 90])
#ship1_image = simplegui.load_image("https://www.dropbox.com/s/ohrbk6ismxatwrm/Republic%20Gunship.png?dl=1")

#XWing2
ship2_info = ImageInfo([256, 256], [512, 512], 35, 0, False, [130, 130])
ship2_image = simplegui.load_image("https://www.dropbox.com/s/3iuj654w8iohszg/XWing2.png?dl=1")

#yellow spaceship
#ship_info = ImageInfo([225, 130], [110, 110], 35, 0, False, [100, 100])
#ship_image = simplegui.load_image("https://www.dropbox.com/s/uxl8fptbj3mdom0/star_wars_full.png?dl=1")

#white spaceship
ship1_info = ImageInfo([85, 275], [140, 140], 35, 0, False, [120, 120])
ship1_image = simplegui.load_image("https://www.dropbox.com/s/uxl8fptbj3mdom0/star_wars_full.png?dl=1")

#allien fighter02
allien_ship_info = ImageInfo([128, 128], [256, 256], 35, 0, False, [70, 70])
allien_ship_image = simplegui.load_image("https://www.dropbox.com/s/odlkei9m1qur8v1/SW-Fighter02.png?dl=1")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 100)
missile_image = simplegui.load_image("https://www.dropbox.com/s/n2ui4n00bdvs6yq/shot2.png?dl=1")

allien_missile_image = simplegui.load_image("https://www.dropbox.com/s/urf501rrmvgki0o/shot1.png?dl=1")


# missile image - shot1.png, shot2.png, shot3.png
rocket_info = ImageInfo([10,10], [20, 20], 7, 100)
rocket_image = simplegui.load_image("https://www.dropbox.com/s/bmasr0eib0uatwl/shot3.png?dl=1")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("https://www.dropbox.com/s/ofcs7pr5k3dkwdb/asteroid_blue.png?dl=1")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True, canvas_missile_size)
explosion_image = simplegui.load_image("https://www.dropbox.com/s/77bz0jmbhpj4i6k/explosion_alpha.png?dl=1")

rocket_explosion_info = ImageInfo([65, 97.5], [195, 195], 17, 25, True, canvas_rocket_size)
rocket_explosion_image = simplegui.load_image("https://www.dropbox.com/s/fvbln8z0ujnivvk/explosion-spritesheet.png?dl=1")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("https://www.dropbox.com/s/3tn1emhbqmpjj43/soundtrack.mp3?dl=1")
missile_sound = simplegui.load_sound("https://www.dropbox.com/s/dyz581ar2iq0xwy/missile.mp3?dl=1")
#missile_sound = simplegui.load_sound("https://www.dropbox.com/s/kfysbbjv03ynmu5/vehicle058.mp5?dl=1")



#original thrust sound
ship_thrust_sound = simplegui.load_sound("https://www.dropbox.com/s/4m4dzoillb4dqgp/thrust.mp3?dl=1")

#ship_thrust_sound = simplegui.load_sound("https://www.dropbox.com/s/0zi5p1kky8qb2vq/aircraft034.mp3?dl=1")
#ship_thrust_sound = simplegui.load_sound("https://www.dropbox.com/s/npw2acs6thtytz0/jet.wav?dl=1")
explosion_sound = simplegui.load_sound("https://www.dropbox.com/s/q2fjx3mqxhul8x7/explosion.mp3?dl=1")
rocket_sound = simplegui.load_sound("https://www.dropbox.com/s/6vg0pxca4jwnps1/rocket_launch.mp3?dl=1")
rocket_exp_sound = simplegui.load_sound("https://www.dropbox.com/s/2b1v3qij34rnyus/rocket_explosion.mp3?dl=1")
missile_sound.set_volume(.4)
soundtrack.set_volume(.4)
ship_thrust_sound.set_volume(.4)
rocket_sound.set_volume(.4)
rocket_exp_sound.set_volume(.4)
# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.canvas_size = info.get_canvas_size()
        
    def draw(self,canvas):
#        canvas.draw_circle(self.pos, self.radius, 1, "White", "White")
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.canvas_size, self.angle)

    def update(self):
                # moving
#        print 'self.pos[0]:', self.pos[0]
#        print 'self.pos[1]:', self.pos[1]
        self.pos[0] = (self.pos[0] + self.vel[0])%WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1])%HEIGHT
#        print 'self.pos[0]:', self.pos[0]
#        print 'self.pos[1]:', self.pos[1]
        
        
        
        # friction
        self.vel[0] *= .98
        self.vel[1] *= .98
               
        
        #rotation
        self.angle += self.angle_vel
        
        #vector
        vector = angle_to_vector(self.angle)

        #acceleration
        if self.thrust:
            
            self.vel[0] += vector[0]*.15
            self.vel[1] += vector[1]*.15
        pass
    
    def update_image_pos(self, pos):
        self.image_center[0] += pos[0]
        self.image_center[1] += pos[1]
        
    def get_image_pos(self):
        return self.image_center
    
    def get_angle(self):
        return self.angle
    
    def get_vel(self):
        return self.vel
    
    def get_pos(self):
        return self.pos
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.canvas_size = info.get_canvas_size()
        self.age = 0
        self.pic_to_show = 0
        if sound:
            sound.rewind()
            sound.play()
#        print 'pos=',self.pos
#        print 'image_center=',self.image_center
        
   
    def draw(self, canvas):
#        canvas.draw_circle(self.pos, self.radius, 1, "Red", "Red")
        if self.animated:
#            if self.age == self.lifespan:
#                image_center[0] = 64
#                return
            #self.age*self.image_size[0]
            canvas.draw_image(self.image, [self.image_center[0]+self.age*self.image_size[0], self.image_center[1]], self.image_size, self.pos, self.canvas_size, self.angle)
            self.age += 1
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.canvas_size, self.angle)
    
    
    def update(self):
        self.pos[0] = (self.pos[0] + self.vel[0])%WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1])%HEIGHT
        self.angle += self.angle_vel
        self.age += 1
        
        pass        
    
    def is_collide (self, obj):
        return dist(self.pos, obj.pos) < self.radius + obj.radius
    
    def get_lifespan(self):
        return self.lifespan
    
    def is_live(self):
        return self.lifespan - self.age
           
def draw(canvas):
    global time, fire_missile, lives, score
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    
        
    if not start:
        canvas.draw_image(splash_image, splash_info.get_center(), splash_info.get_size(), (WIDTH / 2, HEIGHT / 2), splash_info.get_size())

    # draw ship and sprites
    process_sprite_group(canvas)
    
    
    #draw information
    canvas.draw_text("Lives: "+str(lives), (50,50), 20, 'white')
    canvas.draw_text("Score: "+str(score), (WIDTH-120,50), 20, 'white')        

def click(pos):
    global score, lives, time, start
    if start:
        return
    start = True
    score = 0
    lives = 3
    time = 0
    soundtrack.play()
    
    
def keydown(key):
    global fire_missile, a_missile, start
    if not start:
        return
#    start = True
    
    #move to create_missile_obj()
#    vel = my_ship.get_vel()
#    angle = my_ship.get_angle()
#    point = angle_to_vector(angle)
    
        
    if key==simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = -0.05
        
    elif key==simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0.05
        
    elif key==simplegui.KEY_MAP["space"]:
        
        #move to create_missile_obj()
#        vel = [point[0]*5+vel[0], point[1]*5+vel[1]]
#        point [0] = point[0]*my_ship.radius+my_ship.pos[0]
#        point [1] = point[1]*my_ship.radius+my_ship.pos[1]
        
        #create_missile_obj(side, obj_type, ship, image, info, sound)
        create_missile_obj('my', 'missile', my_ship, missile_image, missile_info, missile_sound)
        #move to create_missile_obj()
        #a_missile.append(Sprite(point, vel, 0, 0, missile_image, missile_info, missile_sound))

            
    
    elif key==simplegui.KEY_MAP["z"]:
        
#        vel = [point[0]*3+vel[0], point[1]*3+vel[1]]
#        point [0] = point[0]*my_ship.radius+my_ship.pos[0]
#        point [1] = point[1]*my_ship.radius+my_ship.pos[1]
#        a_rocket.append(Sprite(point, vel, angle, 0, rocket_image, rocket_info, rocket_sound))
        create_missile_obj('my', 'rocket', my_ship, rocket_image, rocket_info, rocket_sound)

    elif key==simplegui.KEY_MAP["up"]:
        
        my_ship.update_image_pos([90,0])
        my_ship.thrust = True
        ship_thrust_sound.play()
        
def keyup(key):
    if not start:
        return
    if key==simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = 0
    elif key==simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0
    elif key==simplegui.KEY_MAP["down"]:
        pass
    elif key==simplegui.KEY_MAP["up"]:
        my_ship.update_image_pos([-90,0])
        my_ship.thrust = False
#        print 'x=',math.cos(my_ship.angle)
#        print 'y=',math.sin(my_ship.angle)
        ship_thrust_sound.rewind()
#        ship_thrust_sound.stop()

def get_random_pos():
    return [random.random()*WIDTH*.9+WIDTH*.1, random.random()*HEIGHT*.9+HEIGHT*.1] 
    
    
def get_random_vel():    
    vel = [random.randrange(1, 10)/10.,random.randrange(1, 10)/10.]
    vel[0] *= random.choice([1, -1])
    vel[1] *= random.choice([1, -1])
    return vel

def get_random_angle():    
    return random.random()/10.
    
def get_random_angle_vel():    
    return random.randrange(10)/500.
    
# timer handler that spawns a rock            
def rock_spawner():
    global a_rock
    if start == False:
        return
    if len(a_rock) < ASTEROIDS_AMOUNT:
        while True:
            pos = get_random_pos()
            if dist(pos, my_ship.get_pos()) > 150:
                break
        a_rock.add(Sprite(pos, get_random_vel(), 0, get_random_angle_vel(), asteroid_image, asteroid_info)  )
        
        
def allien_ships_spawner ():
    global allien_ships
    #Ship pos, vel, angle, image, info
    for i in range(len(allien_ships_pos)):
        allien_ships.add(Ship(allien_ships_pos[i],get_random_vel(),0 ,allien_ship_image, allien_ship_info))
        
        
def check_alive_objects(set_obj):
    remove_set = set()
    for obj in set_obj:
        if not obj.is_live():
            remove_set.add(obj)
#    if len(remove_set) > 0:
#        print len(set_obj), len(remove_set)
    set_obj.difference_update(remove_set)
    
    pass

def create_missile_obj(side, obj_type, ship, image, info, sound):
    vel = ship.get_vel()
    angle = ship.get_angle()
    point = angle_to_vector(angle)
    
    vel = [point[0]*5+vel[0], point[1]*5+vel[1]]
    point [0] = point[0]*ship.radius+ship.pos[0]
    point [1] = point[1]*ship.radius+ship.pos[1]
    
    if side == 'my':
        if obj_type == 'missile':
            my_missile.add(Sprite(point, vel, 0, 0, image, info, sound))
        else: 
            vel[0] *=.7 
            vel[1] *=.7
            my_rocket.add(Sprite(point, vel, angle, 0, image, info, sound))
    pass

def collide_group_with_object(set_obj, obj, exp_image, exp_info, exp_sound):
    temp = False
    for obj_in_set in set_obj:
        if obj_in_set.is_collide(obj):
            temp = obj_in_set
            break
    if temp:
        explosions.add(Sprite(obj.pos, (0,0),0,0,exp_image,exp_info, exp_sound))
        set_obj.remove(temp)
        return True
    return False

def collide_group_with_group(set1_obj, set2_obj, exp_image, exp_info, exp_sound):
    rem_set = set()
    for obj_in_set2 in set2_obj:
        if collide_group_with_object(set1_obj, obj_in_set2, exp_image, exp_info, exp_sound):
            rem_set.add(obj_in_set2)
            
    return rem_set

def stop_game():
    global start, a_rock, my_ship, ship_info, allien_missiles, allien_ships
    start = False
    a_rock = set()
    my_missile = set()
    my_rocket = set()
    allien_missiles = set()
    allien_ships = set()
    explosions = set()
#    my_ship.thrust = False
    ship_thrust_sound.rewind()
    soundtrack.rewind()
    ship_info = ImageInfo([45, 45], [90, 90], 35)
    my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
    
    
def process_sprite_group(canvas):
    global lives, score
    
    for rock in a_rock:
        rock.draw(canvas)
        rock.update()
    
    for missile in my_missile:
        missile.draw(canvas)
        missile.update()
        
    for exp in explosions:
        exp.draw(canvas)
        
    for rocket in my_rocket:
        rocket.draw(canvas)
        rocket.update()
    
    for a_s in allien_ships:
        a_s.draw(canvas)
#        a_s.thrust = True
        a_s.update()
        
    my_ship.draw(canvas)
    my_ship.update()
    
    check_alive_objects(my_missile)
    check_alive_objects(my_rocket)
    check_alive_objects(explosions)
    
    #rsm - remove_set_missile - set for missiles that collide with rock
    rsm = collide_group_with_group(a_rock, my_missile, explosion_image, explosion_info, explosion_sound)
    if len(rsm) > 0:
        score += len(rsm) * 10
        my_missile.difference_update(rsm)
    
    #rsr - remove_set_rocket - set for rockets that collide with rock
    rsr = collide_group_with_group(a_rock, my_rocket, rocket_explosion_image,rocket_explosion_info, rocket_exp_sound)
    if len(rsr) > 0:
        score += len(rsr) * 10
        my_rocket.difference_update(rsr)
        
        
    if collide_group_with_object(a_rock, my_ship, rocket_explosion_image,rocket_explosion_info, rocket_exp_sound):
        lives -= 1
        if lives == 0:
            stop_game()
        
        
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
rock_spawner()
#my_ship1 = Ship([WIDTH / 2-200, HEIGHT / 2], [1, 2], 0, ship1_image, ship1_info)
#my_ship2 = Ship([WIDTH / 2+200, HEIGHT / 2], [-2, 1], 0, ship2_image, ship2_info)

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)

allien_ships_spawner()
#timer = simplegui.create_timer(1000.0, rock_spawner)
#allien_ships_spawn_timer = simplegui.create_timer(1000.0, allien_ships_spawner)

# get things rolling
#timer.start()
frame.start()
soundtrack.play()
