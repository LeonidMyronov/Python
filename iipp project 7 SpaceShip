# program template for Spaceship
# http://www.codeskulptor.org/#user40_qn9gCMZ42D_0.py
import simplegui
import math
import random

# globals for user interface
WIDTH = 1000
HEIGHT = 600
score = 0
lives = 3
time = 0
fire_missile = False
a_missile = []
class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):
#        canvas.draw_circle(self.pos, self.radius, 1, "White", "White")
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)

    def update(self):
                # moving
#        print 'self.pos[0]:', self.pos[0]
#        print 'self.pos[1]:', self.pos[1]
        self.pos[0] = (self.pos[0] + self.vel[0])%WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1])%HEIGHT
#        print 'self.pos[0]:', self.pos[0]
#        print 'self.pos[1]:', self.pos[1]
        
        
        
        # friction
        self.vel[0] *= .98
        self.vel[1] *= .98
               
        
        #rotation
        self.angle += self.angle_vel
        
        #vector
        vector = angle_to_vector(self.angle)

        #acceleration
        if self.thrust:
            
            self.vel[0] += vector[0]*.2
            self.vel[1] += vector[1]*.2
        pass
    
    def update_image_pos(self, pos):
        self.image_center[0] += pos[0]
        self.image_center[1] += pos[1]
        
    def get_image_pos(self):
        return self.image_center
    
    def get_angle(self):
        return self.angle
    
    def get_vel(self):
        return self.vel
    
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
#        canvas.draw_circle(self.pos, self.radius, 1, "Red", "Red")
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
    
    
    def update(self):
        self.pos[0] = (self.pos[0] + self.vel[0])%WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1])%HEIGHT
        self.angle += self.angle_vel
        pass        

           
def draw(canvas):
    global time, fire_missile
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw ship and sprites
    my_ship.draw(canvas)
    a_rock.draw(canvas)
#    if fire_missile:
    for missile in a_missile:
        missile.draw(canvas)
        missile.update()
    
    # update ship and sprites
    my_ship.update()
    a_rock.update()
    
            


def keydown(key):
    global fire_missile, a_missile
    if key==simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = -0.05
    elif key==simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0.05
    elif key==simplegui.KEY_MAP["space"]:
        
        vel = my_ship.get_vel()
        print 'vel=', vel
#        vel[0] *= 1.5
#        vel[1] *= 1.5
        point = angle_to_vector(my_ship.get_angle())
        print 'point:', point
        vel = [point[0]*5+vel[0], point[1]*5+vel[1]]
        
#        print'my_ship.pos=',my_ship.pos
        point [0] = point[0]*my_ship.radius+my_ship.pos[0]
        point [1] = point[1]*my_ship.radius+my_ship.pos[1]
#        print 'point:', point
        
        
        
        a_missile.append(Sprite(point, vel, 0, 0, missile_image, missile_info, missile_sound)        )
        if len(a_missile) == 10:
            a_missile.pop(0)
            
        fire_missile = True
        pass
    elif key==simplegui.KEY_MAP["up"]:
        
        my_ship.update_image_pos([90,0])
        my_ship.thrust = True
        ship_thrust_sound.play()
        
def keyup(key):
    if key==simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = 0
    elif key==simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0
    elif key==simplegui.KEY_MAP["down"]:
        pass
    elif key==simplegui.KEY_MAP["up"]:
        my_ship.update_image_pos([-90,0])
        my_ship.thrust = False
#        print 'x=',math.cos(my_ship.angle)
#        print 'y=',math.sin(my_ship.angle)
        ship_thrust_sound.rewind()
#        ship_thrust_sound.stop()

# timer handler that spawns a rock            
def rock_spawner():
    global a_rock
    pos = [random.random()*WIDTH*.9+WIDTH*.1, random.random()*HEIGHT*.9+HEIGHT*.1] 
    vel = [random.randrange(1, 5)/10.,random.randrange(1, 5)/10.]
    vel[0] *= random.choice([1, -1])
    vel[1] *= random.choice([1, -1])
    angle_vel = random.randrange(10)/1000.
    a_rock = Sprite(pos, vel, 0, angle_vel, asteroid_image, asteroid_info)  
    
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
rock_spawner()


# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


timer = simplegui.create_timer(10000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
soundtrack.play()
