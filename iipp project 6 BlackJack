# Mini-project #6 - Blackjack
# music load from http://www.wavsource.com/
#################################################


import simplegui
import random

# define globals
TILE_WIDTH = 70
TILE_HEIGHT = 100

cards_url = 'https://www.dropbox.com/s/r3nk7jj6rc75qf9/Cards.png?dl=1'
cards_image = simplegui.load_image(cards_url)
cards_image_size = 1280, 715

card_image_size = 98.46, 143
card_image_center = card_image_size[0]/2, card_image_size[1]/2

back_card_image_center = card_image_size[0]*2+card_image_center[0], card_image_size[1]*4+card_image_center[1]

sound = simplegui.load_sound('https://www.dropbox.com/s/5t63pwt6yqpqf79/cheering.wav?dl=1')
win_sound = simplegui.load_sound('https://www.dropbox.com/s/msp7dlph5tv7ms1/laugh_x.wav?dl=1')

# define globals for cards
cards_value = ['A', '2', '3', '4','5','6','7','8','9','10','J','Q','K']
cards_suit = ['Clubs', 'Spades', 'Diamonds','Hearts']
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# load card sprite - 936x384 - source: jfitz.com
#CARD_SIZE = (72, 96)
#CARD_CENTER = (36, 48)
#card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")
#
#CARD_BACK_SIZE = (72, 96)
#CARD_BACK_CENTER = (36, 48)
#card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
#SUITS = ('C', 'S', 'H', 'D')
#RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
#VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class

class Card:
    
    # definition of intializer
    def __init__(self, suit, value, exp=False, loc=(0,0)):
        if (suit in cards_suit) and (value in cards_value):
            self.exposed = exp
            self.location = loc #center location at canvas
            self.value = value
            self.suit = suit
            x = cards_value.index(value)*card_image_size[0]+card_image_center[0]
            y = cards_suit.index(suit)*card_image_size[1]+card_image_center[1]
            image_center = x,y
            self.image_center = image_center
        else:
            self.value = None
            self.suit = None
            print "Invalid card: ", suit, value
        
    # definition of getter for number
    def get_value(self):
        return self.value
    
    def get_image_location(self):
        return self.image_center
    
    def get_suit(self):
        return self.suit
    
    # check whether tile is exposed
    def is_exposed(self):
        return self.exposed
    
    # expose the tile
    def expose_card(self):
        self.exposed = True
    
    # hide the tile       
    def hide_card(self):
        self.exposed = False
        
    # string method for tiles    
    def __str__(self):
        return str(self.suit)+' '+str(self.value)+", exposed is " + str(self.exposed)+', image center='+str(self.image_center)+', canvas pos='+str(self.location)    

    # draw method for tiles
    def draw(self, canvas):
        loc = self.location
        if self.exposed:
            canvas.draw_image(cards_image, self.image_center, card_image_size, self.location, (TILE_WIDTH, TILE_HEIGHT))
        else:
            canvas.draw_image(cards_image, back_card_image_center, card_image_size, loc, (TILE_WIDTH, TILE_HEIGHT))

    # selection method for tiles
    def is_selected(self, pos):
        inside_hor = self.location[0] - TILE_WIDTH/2 <= pos[0] < self.location[0] +  TILE_WIDTH/2
        inside_vert = self.location[1] -  TILE_HEIGHT/2 <= pos[1] <= self.location[1] +  TILE_HEIGHT/2
        return  inside_hor and inside_vert     
    
    # update position method for card
    def update_location(self, pos):
        self.location = pos
    
    # compare method for two cards
    def is_equal(self, card):
        return self.value == card.get_value() and self.suit == card.get_suit()

#class Card:
#    def __init__(self, suit, rank):
#        if (suit in SUITS) and (rank in RANKS):
#            self.suit = suit
#            self.rank = rank
#        else:
#            self.suit = None
#            self.rank = None
#            print "Invalid card: ", suit, rank
#
#    def __str__(self):
#        return self.suit + self.rank
#
#    def get_suit(self):
#        return self.suit
#
#    def get_rank(self):
#        return self.rank
#
#    def draw(self, canvas, pos):
#        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
#                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
#        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        pass	# create Hand object

    def __str__(self):
        pass	# return a string representation of a hand

    def add_card(self, card):
        pass	# add a card object to a hand

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        pass	# compute the value of the hand, see Blackjack video
   
    def draw(self, canvas, pos):
        pass	# draw a hand on the canvas, use the draw method for cards
 
        
# define deck class 
class Deck:
    def __init__(self):
        self.cards_deck = []
        for i in cards_suit:
            for j in cards_value:
                loc = [0,0]
                
                self.cards_deck.append(Card(i,j))
        
        
    def get_random_card(self):
        return self.cards_deck.pop(random.randrange(len(self.cards_deck)))

    def get_amount_in_deck(self):
        return len(self.cards_deck)
    
    def get_card(self):
        return self.cards_deck.pop()
    
    def shuffle (self):
        random.shuffle(self.cards_deck)
        
        
#class Deck:
#    def __init__(self):
#        pass	# create a Deck object
#
#    def shuffle(self):
#        # shuffle the deck 
#        pass    # use random.shuffle()
#
#    def deal_card(self):
#        pass	# deal a card object from the deck
#    
#    def __str__(self):
#        pass	# return a string representing the deck



#define event handlers for buttons
def deal():
    global outcome, in_play

    # your code goes here
    
    in_play = True

def hit():
    pass	# replace with your code below
 
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
    pass	# replace with your code below
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    
    
    card.draw(canvas)


# define event handlers
def mouseclick(pos):
    
    empty_space = True
    
    if card.is_selected(pos):
        card.expose_card()
    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)
frame.set_mouseclick_handler(mouseclick)
card = Card("Spades", "A")
card.update_location([300, 300])

# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
